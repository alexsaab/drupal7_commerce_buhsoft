<?php

/**
 * Определяем константы
 */
define('BUHSOFT_API_URL', 'https://online.buhsoft.ru/online_kassa/api');
define('BUHSOFT_METHOD_ADD', '/docs/add');
define('BUHSOFT_METHOD_GET', '/docs/get');
define('BUHSOFT_METHOD_SERVER_INFO', '/server/info');

/**
 * Implements hook_enable().
 */
function commerce_buhsoft_enable() {
  $field_name = 'buhsoft_id';
  $entity_type = 'commerce_order';
  $bundle = 'commerce_order';
  // Make sure the field doesn't already exist.
  if (!field_info_field($field_name)) {
    // Create the field.
    $field = [
      'field_name' => $field_name,
      'type' => 'text',
      'settings' => ['max_length' => 255, 'indexes' => TRUE],
    ];
    field_create_field($field);
    watchdog('my_module', t('!field_name was added successfully.', ['!field_name' => $field_name]));
  }
  else {
    watchdog('my_module', t('!field_name already exists.', ['!field_name' => $field_name]));
  }


  if (!field_info_instance($entity_type, $field_name, $bundle)) {
    // Create the instance.
    $instance = [
      'field_name' => $field_name,
      'entity_type' => $entity_type,
      'bundle' => $bundle,
      'label' => 'Buhsoft ID',
      'description' => 'Buhsoft ID (cash voucher) that get customer when we make in transaction',
      'required' => FALSE,
    ];
    field_create_instance($instance);
    watchdog('my_module', t('!field_name was added successfully to entity !entity_type.', [
      '!field_name' => $field_name,
      '!entity_type' => $entity_type,
    ]));
  }
  else {
    watchdog('my_module', t('!field_name already exists in entity !entity_type.', [
      '!field_name' => $field_name,
      '!entity_type' => $entity_type,
    ]));
  }


  $field_name = 'phone';
  $entity_type = 'commerce_customer_profile';
  $bundle = 'shipping';


  if (!field_info_field($field_name)) {
    // Create the field.
    $field = [
      'field_name' => $field_name,
      'type' => 'text',
      'settings' => ['max_length' => 255, 'indexes' => TRUE],
    ];
    field_create_field($field);

    watchdog('my_module', t('!field_name was added successfully.', ['!field_name' => $field_name]));
  }
  else {
    watchdog('my_module', t('!field_name already exists.', ['!field_name' => $field_name]));
  }

  if (!field_info_instance($entity_type, $field_name, $bundle)) {
    // Create the instance.
    $instance = [
      'field_name' => $field_name,
      'entity_type' => $entity_type,
      'bundle' => $bundle,
      'label' => 'Phone',
      'description' => 'Please input in this field customer phone number, this information need for online checkout',
      'required' => TRUE,
    ];
    field_create_instance($instance);
    watchdog('my_module', t('!field_name was added successfully to entity !entity_type.', [
      '!field_name' => $field_name,
      '!entity_type' => $entity_type,
    ]));
  }
  else {
    watchdog('my_module', t('!field_name already exists in entity !entity_type.', [
      '!field_name' => $field_name,
      '!entity_type' => $entity_type,
    ]));
  }


}


/**
 * Implements hook_field_access
 */
function commerce_buhsoft_field_access($op, $field, $entity_type, $entity, $account) {
  // Define read only fields
  $readonly = ['buhsoft_id'];
  if ($op == 'edit' && in_array($field['field_name'], $readonly)) {
    // Disable edit.
    return FALSE;
  }
  return TRUE;
}

/**
 * Implements hook_menu().
 */
function commerce_buhsoft_menu() {
  $items = [];

  $items['admin/commerce/config/advanced-settings/commerce_buhsoft'] = [
    'title' => 'Buhsoft setting',
    'description' => 'Set buhsoft system for online order checkout',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['commerce_buhsoft_settings_form'],
    'access arguments' => ['administer store'],
    'file' => 'commerce_buhsoft.admin.inc',
  ];
  return $items;
}


/**
 * Implements hook_form_alter().
 */
function commerce_buhsoft_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case "commerce_order_ui_order_form":
      $order_id = (int) arg(3);
      if (isset($order_id)) {
        $order = commerce_order_load($order_id);
        if (isset($order)) {

////          dpm($order);
//
//          $commerce_line_item_ids = array_map(function ($line) {
//            return $line['line_item_id'];
//          }, $order->commerce_line_items['und']);
//
//          $commerce_line_items = commerce_line_item_load_multiple($commerce_line_item_ids);
//
//          dpm($commerce_line_items);






          if ((empty($order->buhsoft_id)) && ($order->status == variable_get('commerce_buhsoft_order_status_before', 'checkout_complete'))) {
            $form['#submit'][] = 'commerce_buhsoft_commerce_order_view_update_form_submit';
            $form['buh_soft_submit'] = [
              '#type' => 'submit',
              '#name' => 'to_buhsoft_api',
              '#value' => t('To Buhsoft checkout'),
            ];
            return $form;
            break;
          }
        }
      }
      break;

    case 'default':
      break;
  }
}

/**
 * Большая функция, которая непосредственно и все отправляет в онлайн кассу
 *
 * @param $order
 */
function commerce_buhsoft_online_checkout($order) {

  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  //проверяем на правильность валюты
  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    $line_item = $line_item_wrapper->value();
    $wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
    $price = $wrapper->commerce_unit_price->value();
    if ($price["currency_code"] != 'RUB') {
      drupal_set_message(t('Attention! You must convert you store main currency to rubles (RUB)!'), 'error');
      return;
    }
  }


  $params = [];

  if (!variable_get('commerce_buhsoft_token', '')) {
    drupal_set_message(t('You must setup Buhsoft module initially!'), 'error');
    drupal_goto('/admin/commerce/config/advanced-settings/commerce_buhsoft');
    return;
  }

  $params['token'] = variable_get('commerce_buhsoft_token', '');

  if (variable_get('commerce_buhsoft_diller', '')) {
    $params['diller'] = variable_get('commerce_buhsoft_diller', '');
  }

  $params['cms'] = variable_get('commerce_buhsoft_cms', 'Drupal 7 / Commerce 1');

  if (isset($order_wrapper->mail)) {
    $params['email'] = $order_wrapper->mail->value();
  }
  else {
    $params['email'] = variable_get('commerce_buhsoft_default_email', '');
  }

  if (isset($order_wrapper->commerce_customer_shipping)) {
    $params['phone'] = $order_wrapper->commerce_customer_shipping->value()->phone[LANGUAGE_NONE][0]['value'];
  }
  else {
    $params['phone'] = variable_get('commerce_buhsoft_default_phone', '');
  }

  $params['print'] = variable_get('commerce_buhsoft_print', 1);

  if (variable_get('commerce_buhsoft_name_cashier', '')) {
    $params['name_cashier'] = variable_get('commerce_buhsoft_name_cashier', '');
  }

  $params['price']['nal'] = commerce_currency_amount_to_decimal($order_wrapper->commerce_order_total->amount->value(), $order_wrapper->commerce_order_total->currency_code->value());

  //Продажа смотреть тут https://online.buhsoft.ru/online_kassa/docs/dist/index.html
  $params['typeOperation'] = 0;


  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    $line_item = $line_item_wrapper->value();
    $wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
    $price = $wrapper->commerce_unit_price->value();

    if (isset($wrapper->commerce_product)) {
      $params['data'][$delta]['name'] = $wrapper->commerce_product->title->value();
    }
    else {
      $params['data'][$delta]['name'] = $wrapper->line_item_label->value();
    }
    $params['data'][$delta]['count'] = number_format($wrapper->quantity->value(), 0, '.', '');

    $params['data'][$delta]['price'] = number_format(commerce_currency_amount_to_decimal($price['amount'], $price['currency_code']), 2, '.', '');

    if (isset($wrapper->commerce_product)) {
      $params['data'][$delta]['type_nds'] = variable_get('commerce_buhsoft_vat_' . $wrapper->commerce_product->type->value(), 1);
    } else {
      $params['data'][$delta]['type_nds'] = variable_get('commerce_buhsoft_vat_delivery', 1);
    }

  }


  $response = _commerce_buhsoft_http_get_request(BUHSOFT_API_URL, BUHSOFT_METHOD_ADD, $params);

  if ($response->code != 200) {
    $message = t('Error code is "%code%". Status is "%status_message%".', [
      '%code%' => $response->code,
      '%status_message%' => $response->status_message,
    ]);
    drupal_set_message($message, 'error');
    watchdog('error', $message);
    return;
  }

  $data = json_decode($response->data);

  if ($data->ok != '1') {
    $message = t('Error code is "%error_code%". Error message is "%error_message%".', [
      '%error_code%' => $data->error_code,
      '%error_message%' => $data->error_message,
    ]);
    drupal_set_message($message, 'error');
    watchdog('error', $message);
    return;
  }
  else {
    // записываем ID
    $order_wrapper->buhsoft_id->value = $data->guid;
    $order_wrapper->save();

    $message = t('Buhsoft server responded: guid is "%guid%", time is "%time%".', [
      '%guid%' => $data->guid,
      '%time%' => $data->time,
    ]);

    $order->log = $message;
    commerce_order_save($order);

    drupal_set_message($message, 'status');
    watchdog('status', $message);

    return $data->guid;
  }
}


/**
 * Отправка заказа в Buhsoft для онлайн кассы
 *
 * @param $form
 * @param $form_state
 */
function commerce_buhsoft_commerce_order_view_update_form_submit(&$form, &$form_state) {
  if ($form_state['triggering_element']['#name'] == 'to_buhsoft_api') {
    $order_id = (int) arg(3);
    if (isset($order_id)) {
      $order = commerce_order_load($order_id);
      if (isset($order)) {
        commerce_buhsoft_online_checkout($order);
      }
    }
  }
}

/**
 * Запрос в систему Buhsoft через cUrl
 *
 * @param $url
 * @param $method
 * @param $params
 *
 * @return mixed
 */
function _commerce_buhsoft_curl_request($url, $method, $params) {
  $curl = curl_init();
  curl_setopt($curl, CURLOPT_URL, $url . $method);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($curl, CURLOPT_POST, TRUE);
  curl_setopt($curl, CURLOPT_POSTFIELDS, http_build_query($params));
  $response = curl_exec($curl);
  curl_close($curl);
  return $response;
}


/**
 * Запрос в систему Buhsoft через file_get_content (Drupalовская внутренняя
 * функция drupal_http_request)
 *
 * @param $url
 * @param $method
 * @param $params
 *
 * @return object
 */
function _commerce_buhsoft_http_get_request($url, $method, $params) {
  //странно но не работает через передачу параметров не через командную строку а как положено.
  return drupal_http_request($url . $method . '?' . http_build_query($params));
}


/**
 * Implements hook_uc_order_pane_alter().
 */
function commerce_buhsoft_uc_order_pane_alter(&$panes) {
  $panes['payment']['callback'] = 'commerce_buhsoft_uc_payment_pane_callback';
}


/**
 * Переделываем панели
 *
 * @param $op
 * @param $order
 * @param null $form
 * @param null $form_state
 *
 * @return string
 */
function commerce_buhsoft_uc_payment_pane_callback($op, $order, &$form = NULL, &$form_state = NULL) {
  switch ($op) {
    case 'view':
      $build['balance'] = ['#markup' => t('Balance: @balance', ['@balance' => uc_currency_format(uc_payment_balance($order))])];

      if (user_access('view payments')) {
        $build['view_payments'] = [
          '#markup' => ' (' . l(t('View'), 'admin/store/orders/' . $order->order_id . '/payments') . ')',
        ];
      }

      $method_name = _uc_payment_method_data($order->payment_method, 'review');
      if (empty($method_name)) {
        $method_name = _uc_payment_method_data($order->payment_method, 'name');
      }
      $build['method'] = [
        '#markup' => t('Method: @payment_method', ['@payment_method' => $method_name]),
        '#prefix' => '<br />',
      ];
      $func = _uc_payment_method_data($order->payment_method, 'callback');
      if (function_exists($func)) {
        $method_output = $func('order-view', $order);
        if (!empty($method_output)) {
          $build['output'] = $method_output + [
              '#prefix' => '<br />',
            ];
        }
      }

      $build['buhsoft_id'] = [
        '#prefix' => '<br />',
        '#markup' => t('Buhsoft transaction ID: %buhsoft_id%', ['%buhsoft_id%' => $order->buhsoft_id]),
      ];
      return $build;

    case 'customer':
      $method_name = _uc_payment_method_data($order->payment_method, 'review');
      if (empty($method_name)) {
        $method_name = _uc_payment_method_data($order->payment_method, 'name');
      }
      $build['method'] = ['#markup' => t('Method: @payment_method', ['@payment_method' => $method_name])];
      $func = _uc_payment_method_data($order->payment_method, 'callback');
      if (function_exists($func)) {
        $method_output = $func('customer-view', $order);
        if (!empty($method_output)) {
          $build['output'] = $method_output + [
              '#prefix' => '<br />',
            ];
        }
      }

      return $build;

    case 'edit-form':
      $methods = _uc_payment_method_list();
      $options = [];
      foreach ($methods as $id => $method) {
        $options[$id] = $method['name'];
      }
      $form['payment']['payment_method'] = [
        '#type' => 'select',
        '#title' => t('Payment method'),
        '#default_value' => $order->payment_method,
        '#options' => !empty($options) ? $options : [t('None available')],
        '#disabled' => empty($options),
        '#ajax' => [
          'callback' => 'uc_payment_order_pane_ajax_callback',
          'progress' => ['type' => 'throbber'],
          'wrapper' => 'payment-details',
        ],
      ];

      $form['payment']['payment_details'] = [
        '#tree' => TRUE,
        '#prefix' => '<div id="payment-details">',
        '#suffix' => '</div>',
      ];

      $method = isset($form_state['values']['payment_method']) ? $form_state['values']['payment_method'] : $order->payment_method;
      $func = _uc_payment_method_data($method, 'callback');
      if (function_exists($func) && $details = $func('order-details', $order)) {
        if (is_array($details)) {
          $form['payment']['payment_details'] += $details;
        }
        else {
          $form['payment']['payment_details']['#markup'] = $details;
        }
      }
      return $form;

    case 'edit-theme':
      return drupal_render($form['payment']);

    case 'edit-process':
      $changes['payment_method'] = $form_state['values']['payment_method'];
      $changes['payment_details'] = isset($form_state['values']['payment_details']) ? $form_state['values']['payment_details'] : [];
      $func = _uc_payment_method_data($form_state['values']['payment_method'], 'callback');
      if (function_exists($func) && ($return = $func('edit-process', $order, $form, $form_state)) != NULL && is_array($return)) {
        $changes['payment_details'] = array_merge($changes['payment_details'], $return);
      }

      if (!isset($order->payment_details)) {
        $order->payment_details = [];
      }
      return $changes;
  }
}


/**
 * Возвращаем в форму статус сервера
 *
 * @param $form
 */
function _commerce_buhsoft_settings_get_server_status(&$form) {
  $response = _commerce_buhsoft_http_get_request(BUHSOFT_API_URL, BUHSOFT_METHOD_SERVER_INFO, ['token' => variable_get('commerce_buhsoft_token', '')]);

  if (($response->code != 200) || (isset($response->error))) {
    $form['commerce_buhsoft_status'] = [
      '#type' => 'markup',
      '#markup' => t('Exception is "%exception%". Status code is "%code%".', [
        '%exception%' => $response->error,
        '%code%' => $response->code,
      ]),
    ];
  }
  else {
    $data = json_decode($response->data);
    if ($data->ok == 0) {
      $form['commerce_buhsoft_status'] = [
        '#type' => 'markup',
        '#markup' => t('Server status is "%error_message%". Error code is "%error_code%".', [
          '%error_message%' => $data->error_message,
          '%error_code%' => $data->error_code,
        ]),
      ];
    }
    elseif ($data->ok == '1') {
      $form['commerce_buhsoft_status'] = [
        '#type' => 'markup',
        '#prefix' => '</br>',
        '#markup' => t('Server status is ok.'),
      ];
      $form['commerce_buhsoft_status_0'] = [
        '#type' => 'markup',
        '#prefix' => '</br>',
        '#markup' => t('ServerWorker is "%serverWorker%".', ['%serverWorker%' => $data->info->serverWorker]),
      ];
      $form['commerce_buhsoft_status_1'] = [
        '#type' => 'markup',
        '#prefix' => '</br>',
        '#markup' => t('Period is "%period%".', ['%period%' => $data->info->period]),
      ];
      $form['commerce_buhsoft_status_2'] = [
        '#type' => 'markup',
        '#prefix' => '</br>',
        '#markup' => t('Guid_cashier is "%guid_cashier%".', ['%guid_cashier%' => $data->info->guid_cashier]),
      ];
      $form['commerce_buhsoft_status_3'] = [
        '#type' => 'markup',
        '#prefix' => '</br>',
        '#markup' => t('Guid_kkm is "%guid_kkm%".', ['%guid_kkm%' => $data->info->guid_kkm]),
      ];
      $form['commerce_buhsoft_status_4'] = [
        '#type' => 'markup',
        '#prefix' => '</br>',
        '#markup' => t('LastDate_check is "%lastDate_check%".', ['%lastDate_check%' => $data->info->lastDate_check]),
      ];

      if (isset($data->info->mustBePrinted)) {
        $form['commerce_buhsoft_status_5'] = [
          '#type' => 'markup',
          '#prefix' => '</br>',
          '#markup' => t('MustBePrinted is "%mustBePrinted%".', ['%mustBePrinted%' => $data->info->mustBePrinted]),
        ];
      }

    }
  }

  return $form;
}

/**
 * Выводит отформатированный список статусов заказов
 *
 * @return array
 */
function _commerce_buhsoft_get_formated_order_statuses() {
  // Build an array of order status options grouped by order state.
  $options = [];

  foreach (commerce_order_state_get_title() as $name => $title) {
    foreach (commerce_order_statuses(['state' => $name]) as $order_status) {
      $options[check_plain($title)][$order_status['name']] = check_plain($order_status['title']);
    }
  }

  return $options;
}